<?xml version="1.0" encoding="UTF-8"?>
<project name="libgdx_rules">
 
    <!-- The "libgdx.properties" file contains libgdx-specific properties. -->
    <property file="libgdx.properties" />
 
    <!-- Make sure that the required properties were set in "libgdx.properties". -->
    <fail message="libgdx.main.dir is not set. Make sure to set it in the libgdx.properties file." unless="libgdx.main.dir" />
 
    <target name="rename-release-with-version-number">
        <xmlproperty file="AndroidManifest.xml" 
                     prefix="themanifest" 
                     collapseAttributes="true"/>

        <!--  see ${sdk.dir}/tools/ant/build.xml -set-release-mode -->
        <property name="out.packaged.file" 
                  location="${out.absolute.dir}/${ant.project.name}-${themanifest.manifest.android:versionName}-release-unsigned.apk" />
        <property name="out.final.file" 
                  location="${out.absolute.dir}/${ant.project.name}-${themanifest.manifest.android:versionName}-release.apk" />
    </target>
    
    <target name="-set-release-mode"
         depends="rename-release-with-version-number,android_rules.-set-release-mode">
        <echo message="target: ${build.target}"></echo>
    </target>
    
    <target name="-pre-build">
        <!-- We copy over the gdx.jar to the Android project's libs directory because all
             attempts to reference to JARs in external directories were unsuccessful. This
             isn't quite as pretty but it works! Ignoring the copied JAR in version control
             removes problems with duplication. -->
        <copy todir="libs" verbose="${verbose}">
            <fileset dir="${libgdx.main.dir}/libs" includes="gdx.jar" />
            <fileset dir="${facebook.main.dir}" includes="facebooksdk.jar" />
        </copy>
    </target>
 
    <target name="-compile" depends="-build-setup, -pre-build, -code-gen, -pre-compile">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            <condition property="extensible.classpath" value="${tested.project.absolute.dir}/bin/classes" else=".">
                <isset property="tested.project.absolute.dir" />
            </condition>
            <condition property="extensible.libs.classpath" value="${tested.project.absolute.dir}/${jar.libs.dir}" else="${jar.libs.dir}">
                <isset property="tested.project.absolute.dir" />
            </condition>
            <javac
                encoding="${java.encoding}"
                source="${java.source}"
                target="${java.target}"
                debug="true"
                extdirs=""
                includeantruntime="false"
                destdir="${out.classes.absolute.dir}"
                bootclasspathref="project.target.class.path"
                verbose="${verbose}"
                classpath="${extensible.classpath}"
                fork="${need.javac.fork}">
                <src path="${source.absolute.dir}" />
                <src path="${gen.absolute.dir}" />
                <src path="${libgdx.main.dir}" />
                <classpath>
                    <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
                </classpath>
                <compilerarg line="${java.compilerargs}" />
            </javac>
            <if condition="${project.is.library}">
                <then>
                    <echo>Creating library output jar file...</echo>
                    <property name="out.library.jar.file" location="${out.absolute.dir}/classes.jar" />
                    <if>
                        <condition>
                            <length string="${android.package.excludes}" trim="true" when="greater" length="0" />
                        </condition>
                        <then>
                            <echo>Custom jar packaging exclusion: ${android.package.excludes}</echo>
                        </then>
                    </if>
 
                    <propertybyreplace name="manifest.package.path" input="${manifest.package}" replace="." with="/" />
 
                    <jar destfile="${out.library.jar.file}">
                        <fileset dir="${out.classes.absolute.dir}" includes="**/*.class" excludes="${manifest.package.path}/R.class ${manifest.package.path}/R$*.class ${manifest.package.path}/Manifest.class ${manifest.package.path}/Manifest$*.class ${manifest.package.path}/BuildConfig.class"/>
                        <fileset dir="${source.absolute.dir}" excludes="**/*.java ${android.package.excludes}" />
                    </jar>
                </then>
            </if>
            <!-- if the project is instrumented, intrument the classes -->
            <if condition="${build.is.instrumented}">
                <then>
                    <echo>Instrumenting classes from ${out.absolute.dir}/classes...</echo>
                    <!-- It only instruments class files, not any external libs -->
                    <emma enabled="true">
                        <instr verbosity="${verbosity}" mode="overwrite" instrpath="${out.absolute.dir}/classes" outdir="${out.absolute.dir}/classes">
                            <filter excludes="${manifest.package}.R,${manifest.package}.R$$*,${manifest.package}.BuildConfig" />
                            <filter value="${emma.filter}" />
                        </instr>
                    </emma>
                </then>
            </if>
        </do-only-if-manifest-hasCode>
    </target>
 
    <!-- clean and release -->
    <target depends="clean, release" name="rebuild" description="Cleans and rebuilds a Release">
    </target>
</project>